#include <iostream>
#include <cstring>
#include <thread>
#include <chrono>
#include <stdexcept>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

void handle_client(int client_socket) {
    try {
        char buffer[1024];
        while (true) {
            int bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);
            if (bytes_received <= 0) {
                break; // Client disconnected
            }

            std::string message(buffer, bytes_received);
            if (message == "ping") {
                const char* response = "pong";
                send(client_socket, response, strlen(response), 0);
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "Error occurred: " << e.what() << std::endl;
    }

    close(client_socket);
}

void start_server(const char* bind_address, int port) {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        throw std::runtime_error("Failed to create server socket");
    }

    sockaddr_in server_address{};
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = inet_addr(bind_address);
    server_address.sin_port = htons(port);

    if (bind(server_socket, reinterpret_cast<const sockaddr*>(&server_address), sizeof(server_address)) == -1) {
        throw std::runtime_error("Failed to bind server socket");
    }

    if (listen(server_socket, 5) == -1) {
        throw std::runtime_error("Failed to listen on server socket");
    }

    std::cout << "Server started. Listening on " << bind_address << ":" << port << std::endl;

    while (true) {
        sockaddr_in client_address{};
        socklen_t client_address_size = sizeof(client_address);

        int client_socket = accept(server_socket, reinterpret_cast<sockaddr*>(&client_address), &client_address_size);
        if (client_socket == -1) {
            std::cerr << "Failed to accept client connection" << std::endl;
            continue;
        }

        std::cout << "Client connected: " << inet_ntoa(client_address.sin_addr) << ":" << ntohs(client_address.sin_port) << std::endl;

        std::thread client_thread(handle_client, client_socket);
        client_thread.detach();
    }

    close(server_socket);
}

int main(int argc, char* argv[]) {
    if (argc < 3) {
        std::cerr << "Usage: " << argv[0] << " <bind_address> <port>" << std::endl;
        return 1;
    }

    const char* bind_address = argv[1];
    int port = std::atoi(argv[2]);

    try {
        start_server(bind_address, port);
    } catch (const std::exception& e) {
        std::cerr << "Server error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
